from loguru import logger
logger.info("Adding setup end state handler...")

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


from telebot import types
import storage

bot = storage.get_value('bot')
state_machine = storage.get_value('state_machine')
csrftoken = storage.get_value('csrftoken')


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
def handle_continue(message):

    user_id = message.from_user.id

    if not state_machine.get_state(user_id) or state_machine.get_state(user_id) != 'Greetings':
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–µ–ª –∫–∞–∫–æ–π-—Ç–æ —Ö–µ—Ö–µ—Ö. –°—Ä–æ—á–Ω–æ –¥–µ–±–∞–∂–∏—Ç—å! üöΩ")
        logger.error(f"User {user_id} tried to continue without being in the 'Greetings' state.")
        return
    
    state_machine.trigger(user_id, "continue")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("–î–∞! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üöÄ")
    markup.add(button)

    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. üïí\n\n–ì–æ—Ç–æ–≤—ã?", reply_markup=markup)
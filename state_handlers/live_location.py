from loguru import logger
logger.info("Adding idle state handler...")

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


from telebot import types
import storage

bot = storage.get_value('bot')
state_machine = storage.get_value('state_machine')
csrftoken = storage.get_value('csrftoken')

header = {'X-CSRFToken': csrftoken}
cookies = {'csrftoken': csrftoken}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

from telebot.types import Message, KeyboardButton
import requests
import os

URL = os.getenv("URL")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è –∂–∏–≤—É—é)
@bot.message_handler(content_types=['location'])
def handle_location(message: Message):
    user_id = message.from_user.id
    sessions = storage.get_value("sessions")
    if message.location.live_period:
        
        if not "location" in sessions[user_id]:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            button = KeyboardButton(text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üöÄ")
            markup.add(button)

            bot.reply_to(message, "‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∂–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –≤–∞—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.", reply_markup=markup)
        sessions[user_id]["location"] = (message.location.latitude, message.location.longitude)
    else:
        bot.reply_to(message, "üìç –°–ø–∞—Å–∏–±–æ! –ù–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–∂–∏–≤—É—é* –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Telegram.", parse_mode="Markdown")

import time
import threading

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
def track_locations():
    logger.info("Start sending locations")
    while True:
        time.sleep(30)
        logger.info("Sending locations...")
        sessions = storage.get_value("sessions")
        
        if not sessions:
            continue

        for user_id in sessions.keys():
            if not "location" in sessions[user_id]:
                continue
            lat = sessions[user_id]["location"][0]
            lon = sessions[user_id]["location"][1]
            print(f"[{user_id}] ‚û§  –®–∏—Ä–æ—Ç–∞: {lat}, –î–æ–ª–≥–æ—Ç–∞: {lon}")

            responce = requests.post(URL + "records/get_location_records", data={"user_id": user_id, "x": lat, "y": lon}, cookies=cookies, headers=header )

            logger.info("Success" if responce else "Failed")

            time.sleep(1)

    
# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞
threading.Thread(target=track_locations, daemon=True).start()
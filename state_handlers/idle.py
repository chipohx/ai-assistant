from loguru import logger
logger.info("Adding idle state handler...")

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


from telebot import types
from telebot.types import ReplyKeyboardRemove, KeyboardButton
import storage

bot = storage.get_value('bot')
state_machine = storage.get_value('state_machine')
csrftoken = storage.get_value('csrftoken')

header = {'X-CSRFToken': csrftoken}
cookies = {'csrftoken': csrftoken}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

import state_handlers.add_event as add_event
import state_handlers.view_events as view_events
import state_handlers.show_all_events as show_all_events

from text import parse_reminder_huggingface
from voice import parse_reminder_from_audio

import requests
import os

URL = os.getenv("URL")


@bot.message_handler(content_types=['text', 'voice'])
def idle(message):


    sessions = storage.get_value('sessions')
    if not sessions or not message.chat.id in sessions:
        logger.critical(f"Session not found for chat ID {message.chat.id}, creating new session")
        exit(1)

    command = None


    if state_machine.get_state(message.chat.id) == "Greetings":

        if not "location" in sessions[message.chat.id]:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –∂–∏–≤—É—é –ª–æ–∫–∞—Ü–∏—é")
            return
        elif message.text == "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Calendar":

            responce = requests.get(URL + "login", params={"user_id": message.chat.id})

            if responce.status_code == 200:
                auth_url = responce.json()["url"]

                text = "–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google Calendar –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \n\n" + f"<a href='{auth_url}'>{'Google Autorization'}</a>"

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                button = KeyboardButton(text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üöÄ")
                markup.add(button)

                bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="HTML")

                return
            else:
                logger.error(responce.json())

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                button = KeyboardButton(text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üöÄ")
                markup.add(button)
                button = KeyboardButton(text="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Calendar")
                markup.add(button)

                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=markup)
                return
        else:
            state_machine.trigger(message.from_user.id, "continue")

    if message.text == "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üöÄ" or message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "üïí –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º. \n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Ç–æ —Å–∫–∞–∂–∏—Ç–µ \"–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...\"\n\n –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Ç–æ —Å–∫–∞–∂–∏—Ç–µ \"–ü–æ–∫–∞–∂–∏ –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\"", reply_markup=ReplyKeyboardRemove())
        return
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        bot.send_message(message.chat.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
        return
    elif message.text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":

        bot.send_message(message.chat.id, "üíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ...", reply_markup=ReplyKeyboardRemove())
        
        content = sessions[message.chat.id]['added_reminder']
        content['user_id'] = message.chat.id
        
        responce = requests.post(URL + "records/add", data=content, headers=header, cookies=cookies)

        if responce.status_code != 200:
            mes = responce.json()
            logger.error(f"Error adding reminder: {mes['message']}")
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        bot.send_message(message.chat.id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        return
    
    elif message.content_type == 'text':
        command = parse_reminder_huggingface(message.text)
        logger.info(f"User {message.from_user.id} added text command: {command}")
    elif message.content_type == 'voice':
        bot.send_message(message.chat.id, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞...")
        voice = message.voice
        file_info = bot.get_file(voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
        file_name = f"voice.ogg"
        with open(file_name, 'wb') as f:
            f.write(downloaded_file)
        
        command = parse_reminder_from_audio(file_name)
        # command = decription_text.parse_reminder_huggingface(raw_command)
        logger.info(f"User {message.from_user.id} added audio command: {command}")


    if not command:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    if command["action"] == "add":
        sessions[message.chat.id]['added_reminder'] = command
        storage.set_storage('sessions', sessions)
        add_event.show_event(message.chat.id)
        return

    if command["action"] == "delete":
        

        message_id = bot.send_message(message.chat.id, "–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

        content = {"text": command["text"]}
        content['user_id'] = message.chat.id
        
        responce = requests.get(URL + "records/get_similar", params=content, headers=header, cookies=cookies)

        if responce.status_code != 200:
            mes = responce.json()
            logger.error(f"Error adding reminder: {mes['message']}")
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        reminders = responce.json()
        sessions[message.chat.id]['event_list'] = reminders['recs']
        storage.set_storage('sessions', sessions)

        view_events.show_events(message.chat.id)

        return
    

    if command["action"] == "show":
        
        content = {"user_id": message.chat.id}
        
        responce = requests.get(URL + "records/all", params=content, headers=header, cookies=cookies)

        if responce.status_code != 200:
            mes = responce.json()
            logger.error(f"Error adding reminder: {mes['message']}")
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        reminders = responce.json()["recs"]
        sessions[message.chat.id]["event_list"] = reminders
        storage.set_storage('sessions', sessions)

        show_all_events.show_all_events(message.chat.id)

        return

    if command["action"] == "delete_all":
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª —É–ø—É—â–µ–Ω üöΩ")
        return

    bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ üßª")
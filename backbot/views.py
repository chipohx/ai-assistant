from django.shortcuts import render, redirect
from django.http import HttpResponse, HttpResponseRedirect, Http404, JsonResponse
from django.middleware.csrf import get_token

import requests
from datetime import datetime
import json
import re
from google_auth_oauthlib.flow import Flow
import os, pickle
from dotenv import load_dotenv

load_dotenv()

URL = "http://localhost:8000"

CLIENT_SECRETS_FILE = "client_secret.json"
SCOPES = ["https://www.googleapis.com/auth/calendar"]
REDIRECT_URI = "https://feebly-settled-killifish.cloudpub.ru/oauth2callback"
TOKEN=os.getenv("TOKEN")

user_tokens = {}
pending_flows = {}

def post_db(url, content):
    csrftoken = requests.get(url).json()['csrf']
    
    header = {'X-CSRFToken': csrftoken}
    cookies = {'csrftoken': csrftoken}

    ans = requests.post(url, data=content, headers=header, cookies=cookies).json()
    return ans
def get_db(url, content):
    return requests.get(url, params=content)

def get_csrf(request):
    content = {'csrf': get_token(request)}
    return JsonResponse(content)

def index(request):
    ans = preprosess_message(request.POST['message'])
    ans['user_id'] = request.POST['user_id']
    return JsonResponse(ans)


def send_message(CHAT_ID, TEXT):
    
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": TEXT
    }
    response = requests.post(url, data=payload)
    return response

def login(request):
    user_id = request.GET['user_id']

    flow = Flow.from_client_secrets_file(
        CLIENT_SECRETS_FILE,
        scopes=SCOPES,
        redirect_uri=REDIRECT_URI
    )

    # üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ state
    auth_url, _ = flow.authorization_url(
        prompt='consent',
        access_type='offline',
        include_granted_scopes='true',
        state=str(user_id)
    )

    pending_flows[user_id] = flow
    return JsonResponse({"url": auth_url})

# def login(request):
#     user_id = request.GET['user_id']
#     print("in login", user_id)
#     flow = Flow.from_client_secrets_file(
#         CLIENT_SECRETS_FILE,
#         scopes=SCOPES,
#         redirect_uri=REDIRECT_URI
#     )
#     auth_url, _ = flow.authorization_url(prompt='consent', access_type='offline', include_granted_scopes='true')
#     print("in login", user_id)
#     print("_", _)
#     user_tokens[user_id] = flow
#     return JsonResponse({"url": auth_url})


def oauth2callback(request):
    state = request.GET['state']
    code = request.GET['code']
  
    if not state or not code:
        return render(request, 'backbot/unsuccessful_reg.html')

    try:
        user_id = state
    except ValueError:
        return render(request, 'backbot/unsuccessful_reg.html')
    
    flow = pending_flows.get(user_id)
    if not flow:
        return render(request, 'backbot/unsuccessful_reg.html')
    
    try:
        flow.fetch_token(code=code)
        credentials = flow.credentials

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        os.makedirs("tokens", exist_ok=True)
        with open(f"tokens/{user_id}.pickle", "wb") as token_file:
            pickle.dump(credentials, token_file)
        send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!")
        del pending_flows[user_id]  # –æ—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        return render(request, 'backbot/successful_reg.html')
        return HttpResponse("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram.")
    except Exception as e:
        return render(request, 'backbot/unsuccessful_reg.html')
    
# def oauth2callback(request):
#     state = request.GET['state']
#     code = request.GET['code']
#     print("USer tokens", user_tokens)
#     print("state", state)

#     for user_id, flow in user_tokens.items():
#         print("In oauth", user_id)
#         flow.fetch_token(code=code)
#         credentials = flow.credentials
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
#         with open(f"tokens/{user_id}.pickle", "wb") as token_file:
#             pickle.dump(credentials, token_file)
#         send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!")
#         #bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!")
#         return HttpResponse("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram.")
#     return HttpResponse("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")


# =======================================================
def preprosess_message(text):
    try:
        parsed_data = parse_reminder_huggingface(text)

        return parsed_data
        # # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è –∏–∑ JSON
        # print("–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        # print(f"–î–µ–π—Å—Ç–≤–∏–µ: {parsed_data.get('action', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        # print(f"–¢–µ–∫—Å—Ç: {parsed_data.get('text', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        # print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {parsed_data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
        # print(f"–õ–æ–∫–∞—Ü–∏—è: {parsed_data.get('location', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
        #
        # if 'datetime' in parsed_data:
        #     try:
        #         reminder_time = datetime.strptime(parsed_data['datetime'], "%Y-%m-%d %H:%M")
        #         print(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {reminder_time}")
        #     except ValueError:
        #         print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {parsed_data['datetime']}")
        # else:
        #     print("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
        #
        # print(f"–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {parsed_data['done']}")
        # print(f"–£—Å–ª–æ–≤–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {parsed_data.get('condition', 'None')}")

    except KeyError as e:
        return f"–í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª—é—á: {e}. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {parsed_data}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

def parse_reminder_huggingface(text):
    current_datetime = datetime.now()
    

    headers = {"Authorization": f"Bearer {'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'}"}

    payload = {
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ò–∑–≤–ª–µ–∫–∞–π –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: {\n\n'action': 'add',\n\n'text': '–∑–∞–±—Ä–∞—Ç—å –¥–æ—á–∫—É –∏–∑ —Å–∞–¥–∏–∫–∞', \n\n'category': 'meeting',\n\n'address': '–≥. –¢–æ–º—Å–∫ –¢–æ–º—Å–∫–∏–π –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –≥–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å',\n\n'datetime': '2023-11-20 09:40',\n\n'done': false,\n\n'condition': 'time'\n\n}. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ JSON. Action –º–æ–∂–µ—Ç –±—ã—Ç—å add, delete –∏ update. Condition –º–æ–∂–µ—Ç –±—ã—Ç—å time (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏), place (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –º–µ—Å—Ç—É) –∏ timeplace (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç—É). –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: meeting, shopping, holiday, business." + f" –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_datetime}"
            },
            {
                "role": "user",
                "content": text
            }
        ],
        "model": "deepseek/deepseek-v3-0324",
        #"model": "meta-llama/Llama-3-8B-Instruct",
    }

    response = requests.post(
        "https://router.huggingface.co/novita/v3/openai/chat/completions",
        headers=headers,
        json=payload,
    )

    if response.status_code == 200:
        result = response.json()["choices"][0]["message"]["content"]

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        try:
            json_match = re.search(r'\{.*\}', result, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                return json.loads(json_str)
            else:
                raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω JSON –≤ –æ—Ç–≤–µ—Ç–µ: {result}")
        except json.JSONDecodeError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON. –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {result}") from e
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ API. –ö–æ–¥: {response.status_code}. –¢–µ–∫—Å—Ç: {response.text}")

